import numpy as np
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.svm import LinearSVC
from sklearn.multiclass import OneVsOneClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, recall_score, precision_score

# Вхідний файл, який містить дані
input_file = 'adult.data.txt'
# Читання даних
X = []
y = []
count_class1 = 0
count_class2 = 0
max_datapoints = 25000

with open(input_file, 'r') as f:
    for line in f.readlines():
        if count_class1 >= max_datapoints and count_class2 >= max_datapoints:
            break
        if '?' in line:
            continue
        data = line[:-1].split(', ')
        if data[-1] == '<=50K' and count_class1 < max_datapoints:
            X.append(data)
            count_class1 += 1
        if data[-1] == '>50K' and count_class2 < max_datapoints:
            X.append(data)
            count_class2 += 1
    # Перетворення на масив numpy
X = np.array(X)
print(X)
# Перетворення рядкових даних на числові
label_encoder = [preprocessing.LabelEncoder() for _ in range(X.shape[1])]
X_encoded = np.empty(X.shape)
for i in range(X.shape[1]):
    if X[0, i].isdigit():
        X_encoded[:, i] = X[:, i]
    else:
        X_encoded[:, i] = label_encoder[i].fit_transform(X[:, i])
X = X_encoded[:, :-1].astype(int)
y = X_encoded[:, -1].astype(int)
# Створення SVМ-класифікатора
classifier = OneVsOneClassifier(LinearSVC(random_state=0))
# Навчання класифікатора
classifier.fit(X, y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=5)
classifier = OneVsOneClassifier(LinearSVC(random_state=0))
classifier.fit(X_train, y_train)
y_test_pred = classifier.predict(X_test)
# Обчислення F-міри для SVМ-класифікатора
f1 = cross_val_score(classifier, X, y, scoring='f1_weighted', cv=3)
print("F1 score: " + str(round(100 * f1.mean(), 2)) + "%")
# Передбачення результату для тестової точки даних
input_data = ['37', 'Private', '215646', 'HS-grad', '9', 'Never married', 'Handlers-cleaners', 'Not-in-family', 'White',
              'Male',
              '0', '0', '40', 'United-States']
# Кодування тестової точки даних
input_data_encoded = [-1] * len(input_data)
for i, item in enumerate(input_data):
    if item.isdigit():
        input_data_encoded[i] = int(item)
    else:
        try:
            input_data_encoded[i] = int(label_encoder[i].transform([item])[0])
        except ValueError:
            input_data_encoded[i] = -1

input_data_encoded = np.array(input_data_encoded)
# # Використання класифікатора для кодованої точки даних
# # та виведення результату

input_data_encoded_2d = input_data_encoded.reshape(1, -1)
# Use the classifier to predict the class of the encoded data point
predicted_class = classifier.predict(input_data_encoded_2d)

print(label_encoder[-1].inverse_transform(predicted_class)[0])

# Check accuracy

# Predict the labels for the test data
y_test_pred = classifier.predict(X_test)
